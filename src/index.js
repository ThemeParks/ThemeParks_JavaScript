/**
 * Theme Parks Wiki V1 API
 * api.themeparks.wiki
 *
 * The version of the OpenAPI document: 1.0.0-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import BoardingGroupState from './model/BoardingGroupState';
import DestinationEntry from './model/DestinationEntry';
import DestinationParkEntry from './model/DestinationParkEntry';
import DestinationsResponse from './model/DestinationsResponse';
import EntityChild from './model/EntityChild';
import EntityChildrenResponse from './model/EntityChildrenResponse';
import EntityData from './model/EntityData';
import EntityDataLocation from './model/EntityDataLocation';
import EntityLiveData from './model/EntityLiveData';
import EntityLiveDataResponse from './model/EntityLiveDataResponse';
import EntityScheduleResponse from './model/EntityScheduleResponse';
import EntityType from './model/EntityType';
import LiveQueue from './model/LiveQueue';
import LiveQueueBOARDINGGROUP from './model/LiveQueueBOARDINGGROUP';
import LiveQueuePAIDRETURNTIME from './model/LiveQueuePAIDRETURNTIME';
import LiveQueueRETURNTIME from './model/LiveQueueRETURNTIME';
import LiveQueueSTANDBY from './model/LiveQueueSTANDBY';
import LiveShowTime from './model/LiveShowTime';
import LiveStatusType from './model/LiveStatusType';
import PriceData from './model/PriceData';
import ReturnTimeState from './model/ReturnTimeState';
import ScheduleEntry from './model/ScheduleEntry';
import TagData from './model/TagData';
import DestinationsApi from './api/DestinationsApi';
import EntitiesApi from './api/EntitiesApi';


/**
* A Node.js API client for the Themeparks API.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var Themeparks = require('index'); // See note below*.
* var xxxSvc = new Themeparks.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new Themeparks.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new Themeparks.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new Themeparks.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 6.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The BoardingGroupState model constructor.
     * @property {module:model/BoardingGroupState}
     */
    BoardingGroupState,

    /**
     * The DestinationEntry model constructor.
     * @property {module:model/DestinationEntry}
     */
    DestinationEntry,

    /**
     * The DestinationParkEntry model constructor.
     * @property {module:model/DestinationParkEntry}
     */
    DestinationParkEntry,

    /**
     * The DestinationsResponse model constructor.
     * @property {module:model/DestinationsResponse}
     */
    DestinationsResponse,

    /**
     * The EntityChild model constructor.
     * @property {module:model/EntityChild}
     */
    EntityChild,

    /**
     * The EntityChildrenResponse model constructor.
     * @property {module:model/EntityChildrenResponse}
     */
    EntityChildrenResponse,

    /**
     * The EntityData model constructor.
     * @property {module:model/EntityData}
     */
    EntityData,

    /**
     * The EntityDataLocation model constructor.
     * @property {module:model/EntityDataLocation}
     */
    EntityDataLocation,

    /**
     * The EntityLiveData model constructor.
     * @property {module:model/EntityLiveData}
     */
    EntityLiveData,

    /**
     * The EntityLiveDataResponse model constructor.
     * @property {module:model/EntityLiveDataResponse}
     */
    EntityLiveDataResponse,

    /**
     * The EntityScheduleResponse model constructor.
     * @property {module:model/EntityScheduleResponse}
     */
    EntityScheduleResponse,

    /**
     * The EntityType model constructor.
     * @property {module:model/EntityType}
     */
    EntityType,

    /**
     * The LiveQueue model constructor.
     * @property {module:model/LiveQueue}
     */
    LiveQueue,

    /**
     * The LiveQueueBOARDINGGROUP model constructor.
     * @property {module:model/LiveQueueBOARDINGGROUP}
     */
    LiveQueueBOARDINGGROUP,

    /**
     * The LiveQueuePAIDRETURNTIME model constructor.
     * @property {module:model/LiveQueuePAIDRETURNTIME}
     */
    LiveQueuePAIDRETURNTIME,

    /**
     * The LiveQueueRETURNTIME model constructor.
     * @property {module:model/LiveQueueRETURNTIME}
     */
    LiveQueueRETURNTIME,

    /**
     * The LiveQueueSTANDBY model constructor.
     * @property {module:model/LiveQueueSTANDBY}
     */
    LiveQueueSTANDBY,

    /**
     * The LiveShowTime model constructor.
     * @property {module:model/LiveShowTime}
     */
    LiveShowTime,

    /**
     * The LiveStatusType model constructor.
     * @property {module:model/LiveStatusType}
     */
    LiveStatusType,

    /**
     * The PriceData model constructor.
     * @property {module:model/PriceData}
     */
    PriceData,

    /**
     * The ReturnTimeState model constructor.
     * @property {module:model/ReturnTimeState}
     */
    ReturnTimeState,

    /**
     * The ScheduleEntry model constructor.
     * @property {module:model/ScheduleEntry}
     */
    ScheduleEntry,

    /**
     * The TagData model constructor.
     * @property {module:model/TagData}
     */
    TagData,

    /**
    * The DestinationsApi service constructor.
    * @property {module:api/DestinationsApi}
    */
    DestinationsApi,

    /**
    * The EntitiesApi service constructor.
    * @property {module:api/EntitiesApi}
    */
    EntitiesApi
};
