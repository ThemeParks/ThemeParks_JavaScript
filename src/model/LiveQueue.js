/**
 * Theme Parks Wiki V1 API
 * api.themeparks.wiki
 *
 * The version of the OpenAPI document: 1.0.0-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LiveQueueBOARDINGGROUP from './LiveQueueBOARDINGGROUP';
import LiveQueuePAIDRETURNTIME from './LiveQueuePAIDRETURNTIME';
import LiveQueueRETURNTIME from './LiveQueueRETURNTIME';
import LiveQueueSTANDBY from './LiveQueueSTANDBY';

/**
 * The LiveQueue model module.
 * @module model/LiveQueue
 * @version 6.0.1
 */
class LiveQueue {
    /**
     * Constructs a new <code>LiveQueue</code>.
     * @alias module:model/LiveQueue
     */
    constructor() { 
        
        LiveQueue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LiveQueue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LiveQueue} obj Optional instance to populate.
     * @return {module:model/LiveQueue} The populated <code>LiveQueue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LiveQueue();

            if (data.hasOwnProperty('STANDBY')) {
                obj['STANDBY'] = LiveQueueSTANDBY.constructFromObject(data['STANDBY']);
            }
            if (data.hasOwnProperty('SINGLE_RIDER')) {
                obj['SINGLE_RIDER'] = LiveQueueSTANDBY.constructFromObject(data['SINGLE_RIDER']);
            }
            if (data.hasOwnProperty('RETURN_TIME')) {
                obj['RETURN_TIME'] = LiveQueueRETURNTIME.constructFromObject(data['RETURN_TIME']);
            }
            if (data.hasOwnProperty('PAID_RETURN_TIME')) {
                obj['PAID_RETURN_TIME'] = LiveQueuePAIDRETURNTIME.constructFromObject(data['PAID_RETURN_TIME']);
            }
            if (data.hasOwnProperty('BOARDING_GROUP')) {
                obj['BOARDING_GROUP'] = LiveQueueBOARDINGGROUP.constructFromObject(data['BOARDING_GROUP']);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/LiveQueueSTANDBY} STANDBY
 */
LiveQueue.prototype['STANDBY'] = undefined;

/**
 * @member {module:model/LiveQueueSTANDBY} SINGLE_RIDER
 */
LiveQueue.prototype['SINGLE_RIDER'] = undefined;

/**
 * @member {module:model/LiveQueueRETURNTIME} RETURN_TIME
 */
LiveQueue.prototype['RETURN_TIME'] = undefined;

/**
 * @member {module:model/LiveQueuePAIDRETURNTIME} PAID_RETURN_TIME
 */
LiveQueue.prototype['PAID_RETURN_TIME'] = undefined;

/**
 * @member {module:model/LiveQueueBOARDINGGROUP} BOARDING_GROUP
 */
LiveQueue.prototype['BOARDING_GROUP'] = undefined;






export default LiveQueue;

