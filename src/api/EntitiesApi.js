/**
 * Theme Parks Wiki V1 API
 * api.themeparks.wiki
 *
 * The version of the OpenAPI document: 1.0.0-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntityChildrenResponse from '../model/EntityChildrenResponse';
import EntityData from '../model/EntityData';
import EntityLiveDataResponse from '../model/EntityLiveDataResponse';
import EntityScheduleResponse from '../model/EntityScheduleResponse';

/**
* Entities service.
* @module api/EntitiesApi
* @version 6.0.1
*/
export default class EntitiesApi {

    /**
    * Constructs a new EntitiesApi. 
    * @alias module:api/EntitiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get entity document
     * Get the full data document for a given entity. You can supply either a GUID or slug string.
     * @param {String} entityID Entity ID (or slug) to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityData} and HTTP response
     */
    getEntityWithHttpInfo(entityID) {
      let postBody = null;
      // verify the required parameter 'entityID' is set
      if (entityID === undefined || entityID === null) {
        throw new Error("Missing the required parameter 'entityID' when calling getEntity");
      }

      let pathParams = {
        'entityID': entityID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityData;
      return this.apiClient.callApi(
        '/entity/{entityID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get entity document
     * Get the full data document for a given entity. You can supply either a GUID or slug string.
     * @param {String} entityID Entity ID (or slug) to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityData}
     */
    getEntity(entityID) {
      return this.getEntityWithHttpInfo(entityID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all children for a given entity document
     * Fetch a list of all the children that belong to this entity. This is recursive, so a destination will return all parks and all rides within those parks.
     * @param {String} entityID Entity ID (or slug) to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityChildrenResponse} and HTTP response
     */
    getEntityChildrenWithHttpInfo(entityID) {
      let postBody = null;
      // verify the required parameter 'entityID' is set
      if (entityID === undefined || entityID === null) {
        throw new Error("Missing the required parameter 'entityID' when calling getEntityChildren");
      }

      let pathParams = {
        'entityID': entityID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityChildrenResponse;
      return this.apiClient.callApi(
        '/entity/{entityID}/children', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all children for a given entity document
     * Fetch a list of all the children that belong to this entity. This is recursive, so a destination will return all parks and all rides within those parks.
     * @param {String} entityID Entity ID (or slug) to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityChildrenResponse}
     */
    getEntityChildren(entityID) {
      return this.getEntityChildrenWithHttpInfo(entityID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get live data for this entity and any child entities
     * Fetch this entity's live data (queue times, parade times, etc.) as well as all child entities. For a destination, this will include all parks within that destination.
     * @param {String} entityID Entity ID (or slug) to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityLiveDataResponse} and HTTP response
     */
    getEntityLiveDataWithHttpInfo(entityID) {
      let postBody = null;
      // verify the required parameter 'entityID' is set
      if (entityID === undefined || entityID === null) {
        throw new Error("Missing the required parameter 'entityID' when calling getEntityLiveData");
      }

      let pathParams = {
        'entityID': entityID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityLiveDataResponse;
      return this.apiClient.callApi(
        '/entity/{entityID}/live', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get live data for this entity and any child entities
     * Fetch this entity's live data (queue times, parade times, etc.) as well as all child entities. For a destination, this will include all parks within that destination.
     * @param {String} entityID Entity ID (or slug) to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityLiveDataResponse}
     */
    getEntityLiveData(entityID) {
      return this.getEntityLiveDataWithHttpInfo(entityID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get entity schedule
     * Fetch this entity's schedule for the next 30 days
     * @param {String} entityID Entity ID (or slug) to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityScheduleResponse} and HTTP response
     */
    getEntityScheduleUpcomingWithHttpInfo(entityID) {
      let postBody = null;
      // verify the required parameter 'entityID' is set
      if (entityID === undefined || entityID === null) {
        throw new Error("Missing the required parameter 'entityID' when calling getEntityScheduleUpcoming");
      }

      let pathParams = {
        'entityID': entityID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityScheduleResponse;
      return this.apiClient.callApi(
        '/entity/{entityID}/schedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get entity schedule
     * Fetch this entity's schedule for the next 30 days
     * @param {String} entityID Entity ID (or slug) to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityScheduleResponse}
     */
    getEntityScheduleUpcoming(entityID) {
      return this.getEntityScheduleUpcomingWithHttpInfo(entityID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get entity schedule for a specific month and year
     * Fetch this entity's schedule for the supplied year and month
     * @param {String} entityID Entity ID (or slug) to fetch
     * @param {Number} year Schedule year to fetch
     * @param {Number} month Schedule month to fetch. Must be a two digit zero-padded month.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityScheduleResponse} and HTTP response
     */
    getEntityScheduleYearMonthWithHttpInfo(entityID, year, month) {
      let postBody = null;
      // verify the required parameter 'entityID' is set
      if (entityID === undefined || entityID === null) {
        throw new Error("Missing the required parameter 'entityID' when calling getEntityScheduleYearMonth");
      }
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getEntityScheduleYearMonth");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling getEntityScheduleYearMonth");
      }

      let pathParams = {
        'entityID': entityID,
        'year': year,
        'month': month
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityScheduleResponse;
      return this.apiClient.callApi(
        '/entity/{entityID}/schedule/{year}/{month}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get entity schedule for a specific month and year
     * Fetch this entity's schedule for the supplied year and month
     * @param {String} entityID Entity ID (or slug) to fetch
     * @param {Number} year Schedule year to fetch
     * @param {Number} month Schedule month to fetch. Must be a two digit zero-padded month.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityScheduleResponse}
     */
    getEntityScheduleYearMonth(entityID, year, month) {
      return this.getEntityScheduleYearMonthWithHttpInfo(entityID, year, month)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
